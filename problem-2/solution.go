/**
   Problem 2

    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


 */
package main

import "fmt"

const MAX_NUM = 4000000

func main() {

	fullFib := []int{1, 2}

	last := 2

	// let's generate the entire fib series and then look for just the even ones
	for last < MAX_NUM {

		l := len(fullFib)
		last = fullFib[l - 1] + fullFib[l - 2]

		if (last < MAX_NUM) {
			fullFib = append(fullFib, last)
		}

	}

	// time for some simple math
	sum := 0
	for _, num := range fullFib {

		if num % 2 == 0 {
			sum += num
		}

	}


	fmt.Println(sum)

}
